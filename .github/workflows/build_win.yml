name: Build Windows

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore .NET dependencies
      run: |
        cd ModManagerCore
        dotnet restore

    - name: Build .NET project
      run: |
        cd ModManagerCore
        dotnet build --configuration Release

    - name: Publish .NET project
      run: |
        cd ModManagerCore
        dotnet publish --configuration Release --output ../publish/Core

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies for Python
      run: |
        python -m pip install --upgrade pip
        pip install PySide6 pyinstaller

    - name: Build ModManagerGUI with PyInstaller
      run: |
        cd ModManagerGUI  # Change to the ModManagerGUI directory
        dir  # List contents to debug if needed
        pyinstaller --add-data "../publish/Core;Core" --name ModManagerGUI --windowed main.py

    - name: Zip ModManagerGUI directory
      run: |
        cd ModManagerGUI\dist
        powershell -Command "Compress-Archive -Path ModManagerGUI -DestinationPath ModManagerGUI_win.zip"

    - name: Get current date for tag
      id: get_date
      run: |
        echo "TAG_NAME=win_$(date +'%Y.%m.%d')" >> $GITHUB_ENV

    - name: Create a new release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}  # Tag name dynamically generated based on the date
        release_name: "Release ${{ env.TAG_NAME }}"  # Optional, you can change the name
        draft: false  # Set to true if you want to create a draft release
        prerelease: false  # Set to true if it's a prerelease

    - name: Upload ModManagerGUI artifact to release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ModManagerGUI\dist\ModManagerGUI_win.zip
        asset_name: ModManagerGUI_win.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
